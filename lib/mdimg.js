"use strict";var e=require("fs"),t=require("path"),r=require("puppeteer"),n=require("cheerio"),i=require("marked");const s=async e=>{const t=new i.marked.Renderer;return t.code=({text:e,lang:t})=>"mermaid"==t?`<pre class="mermaid">${e}</pre>`:`<pre><code class="language-${t}">${e}</code></pre>`,i.marked.parse(e,{renderer:t})},a=(e,t)=>String(e).padStart(t,"0"),o=async({inputText:i,inputFilename:o,mdText:l,mdFile:c,outputFilename:d,type:m="png",width:p=800,height:h=100,encoding:g="binary",quality:u=100,htmlText:f,cssText:w,htmlTemplate:y="default",cssTemplate:$="default",theme:x="light",extensions:v=!0,log:b=!1,debug:S=!1,puppeteerProps:j={}})=>{const T=["jpeg","png","webp"],_=["base64","binary","blob"],E={html:"",data:"base64"===g?"":Uint8Array.from([]),path:void 0};let M="";const F=o||c,k=i||l;if(F){const r=t.resolve(F);if(!e.existsSync(r))throw new Error(`Error: input file ${r} is not exists.\n`);if(!e.statSync(r).isFile())throw new Error("Error: input is not a file.\n");M=e.readFileSync(r).toString(),b&&process.stderr.write(`Info: start to convert file ${r} to an image...\n`)}else{if(!k)throw new Error("Error: text or file is required to be converted.\n");M=k,b&&process.stderr.write("Info: start to convert text to an image...\n")}const H=g,J="binary"===H;if(!_.includes(H))throw new Error(`Error: encoding type ${H} is not supported. Valid types: ${_.join(", ")}.\n`);let O=m;if(!T.includes(O))throw new Error(`Error: output file type ${O} is not supported. Valid types: ${T.join(", ")}.\n`);let q,U="";if(J)if(d){const e=t.basename(d),r=t.dirname(d),n=e.split("."),i=n.length;if(i<=1)U=t.resolve(r,`${e}.${O}`);else{const s=n[i-1];T.includes(s)?(O=s,U=t.resolve(d)):(b&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${O}' type.\n`),U=t.resolve(r,`${e}.${O}`))}}else U=t.resolve("mdimg_output",(e=>{const t=new Date;return`mdimg_${t.getFullYear()}_${a(t.getMonth()+1,2)}_${a(t.getDate(),2)}_${a(t.getHours(),2)}_${a(t.getMinutes(),2)}_${a(t.getSeconds(),2)}_${a(t.getMilliseconds(),3)}.${e}`})(O));"png"!==O&&(q=u>0&&u<=100?u:100);const L=(({renderedHtml:r,htmlText:i,cssText:s,htmlTemplate:a="default",cssTemplate:o="default",theme:l="light",extensions:c=!0,log:d=!1})=>{let m=i,p=s;if(!m){let r=t.resolve(a.endsWith(".html")?a:`${__dirname}/../template/html/${a}.html`);try{e.accessSync(r,e.constants.R_OK)}catch(e){d&&process.stderr.write(`Warning: HTML template ${r} is not found or unreadable. Use default HTML template.\n${e}\n`),r=t.resolve(`${__dirname}/../template/html/default.html`)}m=e.readFileSync(r).toString()}if(!p){let r=t.resolve(o.endsWith(".css")?o:`${__dirname}/../template/css/${o}.css`);try{e.accessSync(r,e.constants.R_OK)}catch(e){d&&process.stderr.write(`Warning: CSS template ${r} is not found or unreadable. Use default CSS template.\n${e}\n`),r=t.resolve(`${__dirname}/../template/css/default.css`)}p=e.readFileSync(r).toString()}const h=n.load(m);if(h("head").append(`\n<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>mdimg rendering preview</title>\n<style>\n${p}\n</style>\n`),h(".markdown-body").html(r),!1!==c){const e=Object.assign({highlightJs:!0,mathJax:!0,mermaid:!0},c),{highlightJs:t,mathJax:r,mermaid:n}=e;if(!1!==t){const e=Object.assign({theme:`atom-one-${l}`},t);h("head").append(`\n\x3c!-- highlight.js --\x3e\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/styles/${e.theme}.min.css">\n<script id="Highlight.js-script" defer="defer" type="text/javascript" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/highlight.min.js"><\/script>\n<script type="text/javascript">\n  document.getElementById("Highlight.js-script").onload = function () {\n    hljs.configure(${JSON.stringify(e)});\n    hljs.highlightAll();\n  }\n<\/script>\n`)}if(!1!==r){const e=Object.assign({},r);h("head").append(`\n\x3c!-- MathJax --\x3e\n<script id="MathJax-script" defer="defer" type="text/javascript" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n<script>\n  MathJax = ${JSON.stringify(e)}\n<\/script>\n`)}if(!1!==n){const e=Object.assign({startOnLoad:!0,theme:"dark"===l?"dark":void 0},n);h("head").append(`\n\x3c!-- Mermaid --\x3e\n<script id="Mermaid-script" type="module">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  mermaid.initialize(${JSON.stringify(e)});\n<\/script>\n`)}}return h.html()})({renderedHtml:await s(M),htmlText:f,cssText:w,htmlTemplate:y,cssTemplate:$,extensions:v,theme:x,log:b});E.html=L;const W=Math.max(h,100),I=await r.launch({defaultViewport:{width:p,height:W},args:[`--window-size=${p},${W}`],...j}),A=F?t.dirname(t.resolve(F)):process.cwd(),C=t.resolve(A,`.mdimg_temp_${(new Date).getTime()}_${a(Math.floor(1e4*Math.random()),4)}.html`);try{e.writeFileSync(C,L)}catch(e){b&&process.stderr.write(`Warning: write temporary local HTML file failed, local files may not display correctly. ${e}\n`)}const D=e.existsSync(C);try{const r=await I.newPage();D?await r.goto(`file://${C}`,{waitUntil:"networkidle0"}):await r.setContent(L,{waitUntil:"networkidle0"});const n=await r.$("#mdimg-body");if(!n)throw new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${y} is not valid.\n`);if("binary"===H||"blob"===H){J&&(r=>{const n=t.dirname(r);try{e.mkdirSync(n,{recursive:!0}),e.writeFileSync(r,"")}catch(e){throw new Error(`Error: create new file ${r} failed.\n${String(e)}\n`)}})(U);const r=await n.screenshot({path:J?U:void 0,type:O,quality:q,encoding:"binary"});b&&process.stderr.write(`Info: convert to image${J?` and saved as ${U}`:""} successfully!\n`),E.data=r,E.path=J?U:void 0}else if("base64"===H){const e=await n.screenshot({type:O,quality:q,encoding:"base64"});b&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),E.data=e}}catch(e){throw new Error(String(e))}finally{await(async()=>{D&&!S&&e.rmSync(C),await I.close()})()}return E};exports.convert2img=o,exports.mdimg=o;
