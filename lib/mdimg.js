"use strict";var e=require("path"),t=require("fs"),n=require("puppeteer"),r=require("marked"),i=require("cheerio");const s=async e=>r.marked.parse(e),o=async({inputText:r,inputFilename:o,mdText:l,mdFile:c,outputFilename:d,type:p="png",width:m=800,height:u=600,encoding:h="binary",quality:w=100,htmlText:g,cssText:f,htmlTemplate:y="default",cssTemplate:$="default",log:v=!1,puppeteerProps:b={}})=>{const T=["jpeg","png","webp"],S=["base64","binary","blob"],_={html:"",data:"base64"===h?"":Uint8Array.from([]),path:void 0};let x="";const E=o||c,F=r||l;if(E){const n=e.resolve(E);if(!t.existsSync(n))throw new Error(`Error: input file ${n} is not exists.\n`);if(!t.statSync(n).isFile())throw new Error("Error: input is not a file.\n");x=t.readFileSync(n).toString(),v&&process.stderr.write(`Info: start to convert file ${n} to an image...\n`)}else{if(!F)throw new Error("Error: text or file is required to be converted.\n");x=F,v&&process.stderr.write("Info: start to convert text to an image...\n")}const q=h,j="binary"===q;if(!S.includes(q))throw new Error(`Error: encoding type ${q} is not supported. Valid types: ${S.join(", ")}.\n`);let H=p;if(!T.includes(H))throw new Error(`Error: output file type ${H} is not supported. Valid types: ${T.join(", ")}.\n`);let M,U="";if(j)if(d){const t=e.basename(d),n=e.dirname(d),r=t.split("."),i=r.length;if(i<=1)U=e.resolve(n,`${t}.${H}`);else{const s=r[i-1];T.includes(s)?(H=s,U=e.resolve(d)):(v&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${H}' type.\n`),U=e.resolve(n,`${t}.${H}`))}}else U=e.resolve("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(H));"png"!==H&&(M=w>0&&w<=100?w:100);const k=(({inputHtml:n,htmlText:r,cssText:s,htmlTemplate:o,cssTemplate:a,log:l})=>{let c=r,d=s;if(!c){let n=e.resolve(__dirname,"../template/html",`${o}.html`);try{t.accessSync(n,t.constants.R_OK)}catch(t){l&&process.stderr.write(`Warning: HTML template ${n} is not found or unreadable. Use default HTML template.\n${t}\n`),n=e.resolve(__dirname,"../template/html/default.html")}c=t.readFileSync(n).toString()}if(!d){let n=e.resolve(__dirname,"../template/css",`${a}.css`);try{t.accessSync(n,t.constants.R_OK)}catch(t){l&&process.stderr.write(`Warning: CSS template ${n} is not found or unreadable. Use default CSS template.\n${t}\n`),n=e.resolve(__dirname,"../template/css/default.css")}d=t.readFileSync(n).toString()}const p=i.load(c);return p(".markdown-body").html(n),`\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>mdimg rendering preview</title>\n  <style>\n    ${d}\n  </style>\n  <script defer="defer" type="application/javascript" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n</head>\n<body>\n  ${p.html()}\n</body>\n</html>`})({inputHtml:await s(x),htmlText:g,cssText:f,htmlTemplate:a(y),cssTemplate:a($),log:v});_.html=k;const C=await n.launch({defaultViewport:{width:m,height:u},args:[`--window-size=${m},${u}`],...b}),I=await C.newPage();await I.setContent(k,{waitUntil:"networkidle0"});const L=await I.$("#mdimg-body");if(L){if("binary"===q||"blob"===q){j&&function(n){const r=e.dirname(n);try{t.mkdirSync(r,{recursive:!0}),t.writeFileSync(n,"")}catch(e){throw new Error(`Error: create new file ${n} failed.\n${String(e)}\n`)}}(U);const n=await L.screenshot({path:j?U:void 0,type:H,quality:M,encoding:"binary"});v&&process.stderr.write(`Info: convert to image${j?` and saved as ${U}`:""} successfully!\n`),_.data=n,_.path=j?U:void 0}else if("base64"===q){const e=await L.screenshot({type:H,quality:M,encoding:"base64"});v&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),_.data=e}return await C.close(),_}throw await C.close(),new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${y} is not valid.\n`)};function a(e){return e.split(".")[0]}exports.convert2img=o,exports.mdimg=o;
