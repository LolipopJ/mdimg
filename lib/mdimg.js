"use strict";var e=require("path"),t=require("fs"),n=require("puppeteer"),i=require("marked"),a=require("cheerio");const s=async e=>i.marked.parse(e),l=async({inputText:i,inputFilename:l,mdText:r,mdFile:c,outputFilename:m,type:d="png",width:u=800,height:p=600,encoding:h="binary",quality:g=100,htmlText:w,cssText:f,htmlTemplate:y="default",cssTemplate:$="default",log:v=!1,puppeteerProps:b={}})=>{const S=["jpeg","png","webp"],T={html:"",data:"binary"===h?Buffer.from(""):"",path:void 0};let _=i||r;const x=l||c;if(x){const n=e.resolve(x);if(!t.existsSync(n))throw new Error(`Input file ${n} is not exists.`);if(!t.statSync(n).isFile())throw new Error("Input is not a file.");_=t.readFileSync(n).toString(),v&&console.log(`Start to convert ${n} to an image.`)}else if(!_)throw new Error("You must provide a text or a file to be converted.");const F=h;if(!["base64","binary"].includes(F))throw new Error(`Encoding ${F} is not supported. Valid values: 'base64' and 'binary'.`);let q=d;if(!S.includes(q))throw new Error(`Output file type ${q} is not supported. Valid values: 'jpeg', 'png' and 'webp'.`);let E,M="";if("binary"===F)if(m){const t=e.basename(m),n=e.dirname(m),i=t.split("."),a=i.length;if(a<=1)M=e.resolve(n,`_outputFilename.${q}`);else{const t=i[a-1];S.includes(t)?(M=e.resolve(m),q=t):(console.warn(`Output file type must be one of 'jpeg', 'png' or 'webp'. Use '${q}' type.`),M=e.resolve(n,`${i[0]}.${q}`))}}else M=e.resolve("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(q));"png"!==q&&(E=g>0&&g<=100?g:100);const C=(({inputHtml:n,htmlText:i,cssText:s,htmlTemplate:l,cssTemplate:o})=>{let r=i,c=s;if(!r){let n=e.resolve(__dirname,"../template/html",`${l}.html`);try{t.accessSync(n,t.constants.R_OK)}catch(t){console.warn(`HTML template ${n} is not found or unreadable. Use default HTML template.`),n=e.resolve(__dirname,"../template/html/default.html")}r=t.readFileSync(n).toString()}if(!c){let n=e.resolve(__dirname,"../template/css",`${o}.css`);try{t.accessSync(n,t.constants.R_OK)}catch(t){console.warn(`CSS template ${n} is not found or unreadable. Use default CSS template.`),n=e.resolve(__dirname,"../template/css/default.css")}c=t.readFileSync(n).toString()}const m=a.load(r);return m(".markdown-body").html(n),`\n  <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>mdimg</title>\n    <style>\n      ${c}\n    </style>\n  </head>\n  <body>\n    ${m.html()}\n  </body>\n  </html>`})({inputHtml:await s(_),htmlText:w,cssText:f,htmlTemplate:o(y),cssTemplate:o($)});T.html=C;const H=await n.launch({defaultViewport:{width:u,height:p},args:[`--window-size=${u},${p}`],...b}),k=await H.newPage();await k.setContent(C,{waitUntil:"networkidle0"});const O=await k.$("#mdimg-body");if(O){if("binary"===F){!function(n){const i=e.dirname(n);try{t.mkdirSync(i,{recursive:!0}),t.writeFileSync(n,"")}catch(e){throw new Error(`Create new file ${n} failed.\n`+String(e))}}(M);const n=await O.screenshot({path:M,quality:E,encoding:F});v&&console.log(`Convert to image successfully!${E?" Iamge quality: "+E:""}\nFile: ${M}`),T.data=n,T.path=M}else if("base64"===F){const e=await O.screenshot({type:q,quality:E,encoding:F});v&&console.log(`Convert to BASE64 encoded string successfully!${E?" Iamge quality: "+E:""}\n${e}`),T.data=e}return await H.close(),T}throw await H.close(),new Error(`Missing HTML element with id: mdimg-body.\nHTML template ${y} is not valid.`)};function o(e){return e.split(".")[0]}exports.convert2img=l,exports.mdimg=l;
