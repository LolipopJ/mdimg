"use strict";var e=require("path"),t=require("fs"),n=require("puppeteer"),a=require("marked"),i=require("cheerio");function o(e){return e.split(".")[0]}exports.convert2img=async({mdText:s="",mdFile:r="",outputFilename:l="",type:c="png",width:d=800,height:u=600,encoding:m="binary",quality:p=100,htmlTemplate:w="default",cssTemplate:h="default",log:g=!1,puppeteerProps:y={}})=>{const f=["jpeg","png","webp"],$={data:"",html:""};let v=s;if(r){const n=e.resolve(r);if(!t.existsSync(n))throw new Error(`Input file ${n} is not exists.`);if(!t.statSync(n).isFile())throw new Error("Input is not a file.");v=t.readFileSync(n,{encoding:"utf-8"}),g&&console.log(`Start to convert ${n} to an image.`)}else if(!v)throw new Error("You must provide a text or a file to be converted.");const b=m;if(!["base64","binary"].includes(b))throw new Error(`Encoding ${b} is not supported. Valid values: 'base64' and 'binary'.`);let _=c;if(!f.includes(_))throw new Error(`Output file type ${_} is not supported. Valid values: 'jpeg', 'png' and 'webp'.`);let S,F="";if("binary"===b)if(l){const t=e.basename(l),n=e.dirname(l),a=t.split("."),i=a.length;if(i<=1)F=e.resolve(n,`_outputFilename.${_}`);else{const t=a[i-1];f.includes(t)?(F=e.resolve(l),_=t):(console.warn(`Output file type must be one of 'jpeg', 'png' or 'webp'. Use '${_}' type.`),F=e.resolve(n,`${a[0]}.${_}`))}}else F=e.resolve("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(_));"png"!==_&&(S=p>0&&p<=100?p:100);const q=((n,a,o)=>{let s=e.resolve(__dirname,"../template/html",`${a}.html`),r=e.resolve(__dirname,"../template/css",`${o}.css`);try{t.accessSync(s,t.constants.R_OK)}catch(t){console.warn(`HTML template ${s} is not found or unreadable. Use default HTML template.`),s=e.resolve(__dirname,"../template/html/default.html")}try{t.accessSync(r,t.constants.R_OK)}catch(t){console.warn(`CSS template ${s} is not found or unreadable. Use default CSS template.`),r=e.resolve(__dirname,"../template/css/default.css")}const l=t.readFileSync(s),c=t.readFileSync(r),d=i.load(l);return d(".markdown-body").html(n),`\n  <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>mdimg</title>\n    <style>\n      ${c}\n    </style>\n  </head>\n  <body>\n    ${d.html()}\n  </body>\n  </html>`})(await(async e=>a.marked.parse(e))(v),o(w),o(h));$.html=q;const E=await n.launch({defaultViewport:{width:d,height:u},args:[`--window-size=${d},${u}`],...y}),T=await E.newPage();await T.setContent(q,{waitUntil:"networkidle0"});const M=await T.$("#mdimg-body");if(M){if("binary"===b){!function(n){const a=e.dirname(n);try{t.mkdirSync(a,{recursive:!0}),t.writeFileSync(n,"")}catch(e){throw new Error(`Create new file ${n} failed.\n`,e)}}(F);const n=await M.screenshot({path:F,quality:S,encoding:b});g&&console.log(`Convert to image successfully!${S?" Iamge quality: "+S:""}\nFile: ${F}`),$.data=n,$.path=F}else if("base64"===b){const e=await M.screenshot({type:_,quality:S,encoding:b});g&&console.log(`Convert to BASE64 encoded string successfully!${S?" Iamge quality: "+S:""}\n${e}`),$.data=e}return await E.close(),$}throw await E.close(),new Error(`Missing HTML element with id: mdimg-body.\nHTML template ${w} is not valid.`)};
