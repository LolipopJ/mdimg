"use strict";var e=require("path"),t=require("fs"),r=require("puppeteer"),n=require("marked"),i=require("cheerio");const s=async e=>{const t=new n.marked.Renderer;return t.code=({text:e,lang:t})=>"mermaid"==t?`<pre class="mermaid">${e}</pre>`:`<pre><code class="language-${t}">${e}</code></pre>`,n.marked.parse(e,{renderer:t})},a=async({inputText:n,inputFilename:a,mdText:c,mdFile:d,outputFilename:m,type:p="png",width:h=800,height:g=600,encoding:u="binary",quality:w=100,htmlText:f,cssText:y,htmlTemplate:$="default",cssTemplate:v="default",theme:b="light",log:x=!1,puppeteerProps:S={}})=>{const T=["jpeg","png","webp"],_=["base64","binary","blob"],j={html:"",data:"base64"===u?"":Uint8Array.from([]),path:void 0};let E="";const M=a||d,F=n||c;if(M){const r=e.resolve(M);if(!t.existsSync(r))throw new Error(`Error: input file ${r} is not exists.\n`);if(!t.statSync(r).isFile())throw new Error("Error: input is not a file.\n");E=t.readFileSync(r).toString(),x&&process.stderr.write(`Info: start to convert file ${r} to an image...\n`)}else{if(!F)throw new Error("Error: text or file is required to be converted.\n");E=F,x&&process.stderr.write("Info: start to convert text to an image...\n")}const k=u,q="binary"===k;if(!_.includes(k))throw new Error(`Error: encoding type ${k} is not supported. Valid types: ${_.join(", ")}.\n`);let H=p;if(!T.includes(H))throw new Error(`Error: output file type ${H} is not supported. Valid types: ${T.join(", ")}.\n`);let U,L="";if(q)if(m){const t=e.basename(m),r=e.dirname(m),n=t.split("."),i=n.length;if(i<=1)L=e.resolve(r,`${t}.${H}`);else{const s=n[i-1];T.includes(s)?(H=s,L=e.resolve(m)):(x&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${H}' type.\n`),L=e.resolve(r,`${t}.${H}`))}}else L=e.resolve("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${l(t.getMonth()+1,2)}_${l(t.getDate(),2)}_${l(t.getHours(),2)}_${l(t.getMinutes(),2)}_${l(t.getSeconds(),2)}_${l(t.getMilliseconds(),3)}.${e}`}(H));"png"!==H&&(U=w>0&&w<=100?w:100);const I=(({inputHtml:r,htmlText:n,cssText:s,htmlTemplate:a,cssTemplate:o,theme:l,log:c})=>{let d=n,m=s;if(!d){let r=e.resolve(__dirname,"../template/html",`${a}.html`);try{t.accessSync(r,t.constants.R_OK)}catch(t){c&&process.stderr.write(`Warning: HTML template ${r} is not found or unreadable. Use default HTML template.\n${t}\n`),r=e.resolve(__dirname,"../template/html/default.html")}d=t.readFileSync(r).toString()}if(!m){let r=e.resolve(__dirname,"../template/css",`${o}.css`);try{t.accessSync(r,t.constants.R_OK)}catch(t){c&&process.stderr.write(`Warning: CSS template ${r} is not found or unreadable. Use default CSS template.\n${t}\n`),r=e.resolve(__dirname,"../template/css/default.css")}m=t.readFileSync(r).toString()}const p=i.load(d);return p("head").append(`<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>mdimg rendering preview</title>\n<style>${m}</style>\n\n\x3c!-- highlight.js --\x3e\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/styles/atom-one-${l}.min.css">\n<script defer="defer" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/highlight.min.js" onload="hljs.highlightAll();"><\/script>\n\n\x3c!-- MathJax --\x3e\n<script defer="defer" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n\n\x3c!-- Mermaid --\x3e\n<script defer="defer" type="module">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, theme: ${"dark"===l?"dark":void 0} });\n<\/script>`),p(".markdown-body").html(r),p.html()})({inputHtml:await s(E),htmlText:f,cssText:y,htmlTemplate:o($),cssTemplate:o(v),theme:b,log:x});j.html=I;const W=await r.launch({defaultViewport:{width:h,height:g},args:[`--window-size=${h},${g}`],...S}),A=M?e.dirname(e.resolve(M)):process.cwd(),C=e.resolve(A,`.mdimg_temp_${(new Date).getTime()}_${l(Math.floor(1e4*Math.random()),4)}.html`);try{t.writeFileSync(C,I)}catch(e){process.stderr.write(`Warning: write temporary local HTML file failed, local files may not display correctly. ${e}\n`)}const D=t.existsSync(C);try{const r=await W.newPage();D?await r.goto(`file://${C}`,{waitUntil:"networkidle0"}):await r.setContent(I,{waitUntil:"networkidle0"});const n=await r.$("#mdimg-body");if(!n)throw new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${$} is not valid.\n`);if("binary"===k||"blob"===k){q&&function(r){const n=e.dirname(r);try{t.mkdirSync(n,{recursive:!0}),t.writeFileSync(r,"")}catch(e){throw new Error(`Error: create new file ${r} failed.\n${String(e)}\n`)}}(L);const r=await n.screenshot({path:q?L:void 0,type:H,quality:U,encoding:"binary"});x&&process.stderr.write(`Info: convert to image${q?` and saved as ${L}`:""} successfully!\n`),j.data=r,j.path=q?L:void 0}else if("base64"===k){const e=await n.screenshot({type:H,quality:U,encoding:"base64"});x&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),j.data=e}}catch(e){throw new Error(String(e))}finally{await(async()=>{D&&t.rmSync(C),await W.close()})()}return j};function o(e){return e.split(".")[0]}function l(e,t){return String(e).padStart(t,"0")}exports.convert2img=a,exports.mdimg=a;
