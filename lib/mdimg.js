"use strict";var e=require("path"),t=require("fs"),r=require("puppeteer"),n=require("marked"),i=require("cheerio");const s=new n.marked.Renderer;s.code=({text:e,lang:t})=>"mermaid"==t?`<pre class="mermaid">${e}</pre>`:`<pre><code class="language-${t}">${e}</code></pre>`;const a=async e=>n.marked.parse(e,{renderer:s}),o=async({inputText:n,inputFilename:s,mdText:o,mdFile:d,outputFilename:c,type:m="png",width:p=800,height:h=600,encoding:u="binary",quality:g=100,htmlText:f,cssText:w,htmlTemplate:y="default",cssTemplate:$="default",theme:v="light",log:b=!1,puppeteerProps:x={}})=>{const S=["jpeg","png","webp"],T=["base64","binary","blob"],_={html:"",data:"base64"===u?"":Uint8Array.from([]),path:void 0};let j="";const E=s||d,F=n||o;if(E?e.dirname(E):process.cwd(),E){const r=e.resolve(E);if(!t.existsSync(r))throw new Error(`Error: input file ${r} is not exists.\n`);if(!t.statSync(r).isFile())throw new Error("Error: input is not a file.\n");j=t.readFileSync(r).toString(),b&&process.stderr.write(`Info: start to convert file ${r} to an image...\n`)}else{if(!F)throw new Error("Error: text or file is required to be converted.\n");j=F,b&&process.stderr.write("Info: start to convert text to an image...\n")}const k=u,q="binary"===k;if(!T.includes(k))throw new Error(`Error: encoding type ${k} is not supported. Valid types: ${T.join(", ")}.\n`);let M=m;if(!S.includes(M))throw new Error(`Error: output file type ${M} is not supported. Valid types: ${S.join(", ")}.\n`);let H,U="";if(q)if(c){const t=e.basename(c),r=e.dirname(c),n=t.split("."),i=n.length;if(i<=1)U=e.resolve(r,`${t}.${M}`);else{const s=n[i-1];S.includes(s)?(M=s,U=e.resolve(c)):(b&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${M}' type.\n`),U=e.resolve(r,`${t}.${M}`))}}else U=e.resolve("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(M));"png"!==M&&(H=g>0&&g<=100?g:100);const L=(({inputHtml:r,htmlText:n,cssText:s,htmlTemplate:a,cssTemplate:o,theme:l,log:d})=>{let c=n,m=s;if(!c){let r=e.resolve(__dirname,"../template/html",`${a}.html`);try{t.accessSync(r,t.constants.R_OK)}catch(t){d&&process.stderr.write(`Warning: HTML template ${r} is not found or unreadable. Use default HTML template.\n${t}\n`),r=e.resolve(__dirname,"../template/html/default.html")}c=t.readFileSync(r).toString()}if(!m){let r=e.resolve(__dirname,"../template/css",`${o}.css`);try{t.accessSync(r,t.constants.R_OK)}catch(t){d&&process.stderr.write(`Warning: CSS template ${r} is not found or unreadable. Use default CSS template.\n${t}\n`),r=e.resolve(__dirname,"../template/css/default.css")}m=t.readFileSync(r).toString()}const p=i.load(c);return p("head").append(`<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>mdimg rendering preview</title>\n<style>${m}</style>\n\n\x3c!-- highlight.js --\x3e\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/styles/atom-one-${l}.min.css">\n<script defer="defer" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/highlight.min.js" onload="hljs.highlightAll();"><\/script>\n\n\x3c!-- MathJax --\x3e\n<script defer="defer" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n\n\x3c!-- Mermaid --\x3e\n<script defer="defer" type="module">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, theme: ${"dark"===l?"dark":void 0} });\n<\/script>`),p(".markdown-body").html(r),console.log("$.html()",p.html()),p.html()})({inputHtml:await a(j),htmlText:f,cssText:w,htmlTemplate:l(y),cssTemplate:l($),theme:v,log:b});_.html=L;const I=await r.launch({defaultViewport:{width:p,height:h},args:[`--window-size=${p},${h}`],...x}),A=await I.newPage();await A.setContent(L,{waitUntil:"networkidle0"});const C=await A.$("#mdimg-body");if(C){if("binary"===k||"blob"===k){q&&function(r){const n=e.dirname(r);try{t.mkdirSync(n,{recursive:!0}),t.writeFileSync(r,"")}catch(e){throw new Error(`Error: create new file ${r} failed.\n${String(e)}\n`)}}(U);const r=await C.screenshot({path:q?U:void 0,type:M,quality:H,encoding:"binary"});b&&process.stderr.write(`Info: convert to image${q?` and saved as ${U}`:""} successfully!\n`),_.data=r,_.path=q?U:void 0}else if("base64"===k){const e=await C.screenshot({type:M,quality:H,encoding:"base64"});b&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),_.data=e}return await I.close(),_}throw await I.close(),new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${y} is not valid.\n`)};function l(e){return e.split(".")[0]}exports.convert2img=o,exports.mdimg=o;
