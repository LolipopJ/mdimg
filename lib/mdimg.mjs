import{resolve as t,basename as e,dirname as n}from"path";import{accessSync as o,constants as a,readFileSync as i,existsSync as l,statSync as r,mkdirSync as s,writeFileSync as d}from"fs";import c from"puppeteer";import{marked as m}from"marked";import p from"cheerio";const u=async({mdText:u="",mdFile:h="",outputFilename:f="",type:g="png",width:$=800,height:y=600,encoding:b="binary",quality:_=100,htmlTemplate:v="default",cssTemplate:E="default",log:T=!1,puppeteerProps:M={}})=>{const C=["jpeg","png","webp"],F={data:"",html:""};let S=u;if(h){const e=t(h);if(!l(e))throw new Error(`Input file ${e} is not exists.`);if(!r(e).isFile())throw new Error("Input is not a file.");S=i(e,{encoding:"utf-8"}),T&&console.log(`Start to convert ${e} to an image.`)}else if(!S)throw new Error("You must provide a text or a file to be converted.");const q=b;if(!["base64","binary"].includes(q))throw new Error(`Encoding ${q} is not supported. Valid values: 'base64' and 'binary'.`);let H=g;if(!C.includes(H))throw new Error(`Output file type ${H} is not supported. Valid values: 'jpeg', 'png' and 'webp'.`);let O,U="";if("binary"===q)if(f){const o=e(f),a=n(f),i=o.split("."),l=i.length;if(l<=1)U=t(a,`_outputFilename.${H}`);else{const e=i[l-1];C.includes(e)?(U=t(f),H=e):(console.warn(`Output file type must be one of 'jpeg', 'png' or 'webp'. Use '${H}' type.`),U=t(a,`${i[0]}.${H}`))}}else U=t("mdimg_output",function(t){const e=new Date;return`mdimg_${e.getFullYear()}_${e.getMonth()+1}_${e.getDate()}_${e.getHours()}_${e.getMinutes()}_${e.getSeconds()}_${e.getMilliseconds()}.${t}`}(H));"png"!==H&&(O=_>0&&_<=100?_:100);const x=((e,n,l)=>{let r=t(__dirname,"../template/html",`${n}.html`),s=t(__dirname,"../template/css",`${l}.css`);try{o(r,a.R_OK)}catch(e){console.warn(`HTML template ${r} is not found or unreadable. Use default HTML template.`),r=t(__dirname,"../template/html/default.html")}try{o(s,a.R_OK)}catch(e){console.warn(`CSS template ${r} is not found or unreadable. Use default CSS template.`),s=t(__dirname,"../template/css/default.css")}const d=i(r),c=i(s),m=p.load(d);return m(".markdown-body").html(e),`\n  <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>mdimg</title>\n    <style>\n      ${c}\n    </style>\n  </head>\n  <body>\n    ${m.html()}\n  </body>\n  </html>`})(await(async t=>m.parse(t))(S),w(v),w(E));F.html=x;const I=await c.launch({defaultViewport:{width:$,height:y},args:[`--window-size=${$},${y}`],...M}),L=await I.newPage();await L.setContent(x,{waitUntil:"networkidle0"});const j=await L.$("#mdimg-body");if(j){if("binary"===q){!function(t){const e=n(t);try{s(e,{recursive:!0}),d(t,"")}catch(e){throw new Error(`Create new file ${t} failed.\n`,e)}}(U);const t=await j.screenshot({path:U,quality:O,encoding:q});T&&console.log(`Convert to image successfully!${O?" Iamge quality: "+O:""}\nFile: ${U}`),F.data=t,F.path=U}else if("base64"===q){const t=await j.screenshot({type:H,quality:O,encoding:q});T&&console.log(`Convert to BASE64 encoded string successfully!${O?" Iamge quality: "+O:""}\n${t}`),F.data=t}return await I.close(),F}throw await I.close(),new Error(`Missing HTML element with id: mdimg-body.\nHTML template ${v} is not valid.`)};function w(t){return t.split(".")[0]}export{u as convert2img};
