import{resolve as e,basename as t,dirname as r}from"path";import{accessSync as n,constants as i,readFileSync as s,existsSync as o,statSync as a,writeFileSync as l,mkdirSync as d,rmSync as c}from"fs";import m from"puppeteer";import{marked as p}from"marked";import{load as h}from"cheerio";const g=async e=>{const t=new p.Renderer;return t.code=({text:e,lang:t})=>"mermaid"==t?`<pre class="mermaid">${e}</pre>`:`<pre><code class="language-${t}">${e}</code></pre>`,p.parse(e,{renderer:t})},f=async({inputText:p,inputFilename:f,mdText:w,mdFile:$,outputFilename:y,type:b="png",width:x=800,height:T=600,encoding:v="binary",quality:_=100,htmlText:j,cssText:E,htmlTemplate:S="default",cssTemplate:M="default",theme:H="light",log:k=!1,puppeteerProps:U={}})=>{const F=["jpeg","png","webp"],L=["base64","binary","blob"],q={html:"",data:"base64"===v?"":Uint8Array.from([]),path:void 0};let I="";const W=f||$,A=p||w;if(W){const t=e(W);if(!o(t))throw new Error(`Error: input file ${t} is not exists.\n`);if(!a(t).isFile())throw new Error("Error: input is not a file.\n");I=s(t).toString(),k&&process.stderr.write(`Info: start to convert file ${t} to an image...\n`)}else{if(!A)throw new Error("Error: text or file is required to be converted.\n");I=A,k&&process.stderr.write("Info: start to convert text to an image...\n")}const C=v,D="binary"===C;if(!L.includes(C))throw new Error(`Error: encoding type ${C} is not supported. Valid types: ${L.join(", ")}.\n`);let O=b;if(!F.includes(O))throw new Error(`Error: output file type ${O} is not supported. Valid types: ${F.join(", ")}.\n`);let R,V="";if(D)if(y){const n=t(y),i=r(y),s=n.split("."),o=s.length;if(o<=1)V=e(i,`${n}.${O}`);else{const t=s[o-1];F.includes(t)?(O=t,V=e(y)):(k&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${O}' type.\n`),V=e(i,`${n}.${O}`))}}else V=e("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(O));"png"!==O&&(R=_>0&&_<=100?_:100);const z=(({inputHtml:t,htmlText:r,cssText:o,htmlTemplate:a,cssTemplate:l,theme:d,log:c})=>{let m=r,p=o;if(!m){let t=e(__dirname,"../template/html",`${a}.html`);try{n(t,i.R_OK)}catch(r){c&&process.stderr.write(`Warning: HTML template ${t} is not found or unreadable. Use default HTML template.\n${r}\n`),t=e(__dirname,"../template/html/default.html")}m=s(t).toString()}if(!p){let t=e(__dirname,"../template/css",`${l}.css`);try{n(t,i.R_OK)}catch(r){c&&process.stderr.write(`Warning: CSS template ${t} is not found or unreadable. Use default CSS template.\n${r}\n`),t=e(__dirname,"../template/css/default.css")}p=s(t).toString()}const g=h(m);return g("head").append(`<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>mdimg rendering preview</title>\n<style>${p}</style>\n\n\x3c!-- highlight.js --\x3e\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/styles/atom-one-${d}.min.css">\n<script defer="defer" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/highlight.min.js" onload="hljs.highlightAll();"><\/script>\n\n\x3c!-- MathJax --\x3e\n<script defer="defer" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n\n\x3c!-- Mermaid --\x3e\n<script defer="defer" type="module">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, theme: ${"dark"===d?"dark":void 0} });\n<\/script>`),g(".markdown-body").html(t),g.html()})({inputHtml:await g(I),htmlText:j,cssText:E,htmlTemplate:u(S),cssTemplate:u(M),theme:H,log:k});q.html=z;const K=await m.launch({defaultViewport:{width:x,height:T},args:[`--window-size=${x},${T}`],...U}),P=W?r(e(W)):process.cwd(),B=e(P,`.mdimg_temp_${(new Date).getTime()}.html`);try{l(B,z)}catch(e){process.stderr.write(`Warning: write temporary local HTML file failed, local files may not display correctly. ${e}\n`)}const J=o(B);try{const e=await K.newPage();J?await e.goto(`file://${B}`,{waitUntil:"networkidle0"}):await e.setContent(z,{waitUntil:"networkidle0"});const t=await e.$("#mdimg-body");if(!t)throw new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${S} is not valid.\n`);if("binary"===C||"blob"===C){D&&function(e){const t=r(e);try{d(t,{recursive:!0}),l(e,"")}catch(t){throw new Error(`Error: create new file ${e} failed.\n${String(t)}\n`)}}(V);const e=await t.screenshot({path:D?V:void 0,type:O,quality:R,encoding:"binary"});k&&process.stderr.write(`Info: convert to image${D?` and saved as ${V}`:""} successfully!\n`),q.data=e,q.path=D?V:void 0}else if("base64"===C){const e=await t.screenshot({type:O,quality:R,encoding:"base64"});k&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),q.data=e}}catch(e){throw new Error(String(e))}finally{await(async()=>{J&&c(B),await K.close()})()}return q};function u(e){return e.split(".")[0]}export{f as convert2img,f as mdimg};
