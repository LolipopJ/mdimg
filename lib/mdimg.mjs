import{resolve as t,basename as e,dirname as n}from"path";import{accessSync as r,constants as i,readFileSync as o,existsSync as s,statSync as a,mkdirSync as l,writeFileSync as p}from"fs";import c from"puppeteer";import{marked as m}from"marked";import{load as d}from"cheerio";const u=async t=>m.parse(t),h=async({inputText:m,inputFilename:h,mdText:w,mdFile:g,outputFilename:$,type:y="png",width:b=800,height:T=600,encoding:_="binary",quality:v=100,htmlText:E,cssText:x,htmlTemplate:S="default",cssTemplate:j="default",log:H=!1,puppeteerProps:M={}})=>{const F=["jpeg","png","webp"],U=["base64","binary","blob"],q={html:"",data:"base64"===_?"":Uint8Array.from([]),path:void 0};let C="";const I=h||g,L=m||w;if(I){const e=t(I);if(!s(e))throw new Error(`Error: input file ${e} is not exists.\n`);if(!a(e).isFile())throw new Error("Error: input is not a file.\n");C=o(e).toString(),H&&process.stderr.write(`Info: start to convert file ${e} to an image...\n`)}else{if(!L)throw new Error("Error: text or file is required to be converted.\n");C=L,H&&process.stderr.write("Info: start to convert text to an image...\n")}const k=_,D="binary"===k;if(!U.includes(k))throw new Error(`Error: encoding type ${k} is not supported. Valid types: ${U.join(", ")}.\n`);let O=y;if(!F.includes(O))throw new Error(`Error: output file type ${O} is not supported. Valid types: ${F.join(", ")}.\n`);let P,V="";if(D)if($){const r=e($),i=n($),o=r.split("."),s=o.length;if(s<=1)V=t(i,`${r}.${O}`);else{const e=o[s-1];F.includes(e)?(O=e,V=t($)):(H&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${O}' type.\n`),V=t(i,`${r}.${O}`))}}else V=t("mdimg_output",function(t){const e=new Date;return`mdimg_${e.getFullYear()}_${e.getMonth()+1}_${e.getDate()}_${e.getHours()}_${e.getMinutes()}_${e.getSeconds()}_${e.getMilliseconds()}.${t}`}(O));"png"!==O&&(P=v>0&&v<=100?v:100);const W=(({inputHtml:e,htmlText:n,cssText:s,htmlTemplate:a,cssTemplate:l,log:p})=>{let c=n,m=s;if(!c){let e=t(__dirname,"../template/html",`${a}.html`);try{r(e,i.R_OK)}catch(n){p&&process.stderr.write(`Warning: HTML template ${e} is not found or unreadable. Use default HTML template.\n${n}\n`),e=t(__dirname,"../template/html/default.html")}c=o(e).toString()}if(!m){let e=t(__dirname,"../template/css",`${l}.css`);try{r(e,i.R_OK)}catch(n){p&&process.stderr.write(`Warning: CSS template ${e} is not found or unreadable. Use default CSS template.\n${n}\n`),e=t(__dirname,"../template/css/default.css")}m=o(e).toString()}const u=d(c);return u(".markdown-body").html(e),`\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>mdimg rendering preview</title>\n  <style>\n    ${m}\n  </style>\n  <script defer="defer" type="application/javascript" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n</head>\n<body>\n  ${u.html()}\n</body>\n</html>`})({inputHtml:await u(C),htmlText:E,cssText:x,htmlTemplate:f(S),cssTemplate:f(j),log:H});q.html=W;const A=await c.launch({defaultViewport:{width:b,height:T},args:[`--window-size=${b},${T}`],...M}),K=await A.newPage();await K.setContent(W,{waitUntil:"networkidle0"});const R=await K.$("#mdimg-body");if(R){if("binary"===k||"blob"===k){D&&function(t){const e=n(t);try{l(e,{recursive:!0}),p(t,"")}catch(e){throw new Error(`Error: create new file ${t} failed.\n${String(e)}\n`)}}(V);const t=await R.screenshot({path:D?V:void 0,type:O,quality:P,encoding:"binary"});H&&process.stderr.write(`Info: convert to image${D?` and saved as ${V}`:""} successfully!\n`),q.data=t,q.path=D?V:void 0}else if("base64"===k){const t=await R.screenshot({type:O,quality:P,encoding:"base64"});H&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),q.data=t}return await A.close(),q}throw await A.close(),new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${S} is not valid.\n`)};function f(t){return t.split(".")[0]}export{h as convert2img,h as mdimg};
