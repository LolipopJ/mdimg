import{resolve as e,dirname as t,basename as r}from"path";import{accessSync as n,constants as i,readFileSync as s,existsSync as o,statSync as a,mkdirSync as l,writeFileSync as d}from"fs";import m from"puppeteer";import{marked as c}from"marked";import{load as p}from"cheerio";const h=new c.Renderer;h.code=({text:e,lang:t})=>"mermaid"==t?`<pre class="mermaid">${e}</pre>`:`<pre><code class="language-${t}">${e}</code></pre>`;const g=async e=>c.parse(e,{renderer:h}),u=async({inputText:c,inputFilename:h,mdText:u,mdFile:w,outputFilename:$,type:y="png",width:b=800,height:x=600,encoding:v="binary",quality:T=100,htmlText:_,cssText:j,htmlTemplate:E="default",cssTemplate:S="default",theme:M="light",log:H=!1,puppeteerProps:k={}})=>{const F=["jpeg","png","webp"],U=["base64","binary","blob"],L={html:"",data:"base64"===v?"":Uint8Array.from([]),path:void 0};let q="";const I=h||w,A=c||u;if(I?t(I):process.cwd(),I){const t=e(I);if(!o(t))throw new Error(`Error: input file ${t} is not exists.\n`);if(!a(t).isFile())throw new Error("Error: input is not a file.\n");q=s(t).toString(),H&&process.stderr.write(`Info: start to convert file ${t} to an image...\n`)}else{if(!A)throw new Error("Error: text or file is required to be converted.\n");q=A,H&&process.stderr.write("Info: start to convert text to an image...\n")}const C=v,O="binary"===C;if(!U.includes(C))throw new Error(`Error: encoding type ${C} is not supported. Valid types: ${U.join(", ")}.\n`);let R=y;if(!F.includes(R))throw new Error(`Error: output file type ${R} is not supported. Valid types: ${F.join(", ")}.\n`);let V,W="";if(O)if($){const n=r($),i=t($),s=n.split("."),o=s.length;if(o<=1)W=e(i,`${n}.${R}`);else{const t=s[o-1];F.includes(t)?(R=t,W=e($)):(H&&process.stderr.write(`Warning: output file type must be one of 'jpeg', 'png' or 'webp'. Use '${R}' type.\n`),W=e(i,`${n}.${R}`))}}else W=e("mdimg_output",function(e){const t=new Date;return`mdimg_${t.getFullYear()}_${t.getMonth()+1}_${t.getDate()}_${t.getHours()}_${t.getMinutes()}_${t.getSeconds()}_${t.getMilliseconds()}.${e}`}(R));"png"!==R&&(V=T>0&&T<=100?T:100);const z=(({inputHtml:t,htmlText:r,cssText:o,htmlTemplate:a,cssTemplate:l,theme:d,log:m})=>{let c=r,h=o;if(!c){let t=e(__dirname,"../template/html",`${a}.html`);try{n(t,i.R_OK)}catch(r){m&&process.stderr.write(`Warning: HTML template ${t} is not found or unreadable. Use default HTML template.\n${r}\n`),t=e(__dirname,"../template/html/default.html")}c=s(t).toString()}if(!h){let t=e(__dirname,"../template/css",`${l}.css`);try{n(t,i.R_OK)}catch(r){m&&process.stderr.write(`Warning: CSS template ${t} is not found or unreadable. Use default CSS template.\n${r}\n`),t=e(__dirname,"../template/css/default.css")}h=s(t).toString()}const g=p(c);return g("head").append(`<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<title>mdimg rendering preview</title>\n<style>${h}</style>\n\n\x3c!-- highlight.js --\x3e\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/styles/atom-one-${d}.min.css">\n<script defer="defer" src="https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11/build/highlight.min.js" onload="hljs.highlightAll();"><\/script>\n\n\x3c!-- MathJax --\x3e\n<script defer="defer" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"><\/script>\n\n\x3c!-- Mermaid --\x3e\n<script defer="defer" type="module">\n  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';\n  mermaid.initialize({ startOnLoad: true, theme: ${"dark"===d?"dark":void 0} });\n<\/script>`),g(".markdown-body").html(t),console.log("$.html()",g.html()),g.html()})({inputHtml:await g(q),htmlText:_,cssText:j,htmlTemplate:f(E),cssTemplate:f(S),theme:M,log:H});L.html=z;const D=await m.launch({defaultViewport:{width:b,height:x},args:[`--window-size=${b},${x}`],...k}),K=await D.newPage();await K.setContent(z,{waitUntil:"networkidle0"});const P=await K.$("#mdimg-body");if(P){if("binary"===C||"blob"===C){O&&function(e){const r=t(e);try{l(r,{recursive:!0}),d(e,"")}catch(t){throw new Error(`Error: create new file ${e} failed.\n${String(t)}\n`)}}(W);const e=await P.screenshot({path:O?W:void 0,type:R,quality:V,encoding:"binary"});H&&process.stderr.write(`Info: convert to image${O?` and saved as ${W}`:""} successfully!\n`),L.data=e,L.path=O?W:void 0}else if("base64"===C){const e=await P.screenshot({type:R,quality:V,encoding:"base64"});H&&process.stderr.write("Info: convert to BASE64 encoded string successfully!\n"),L.data=e}return await D.close(),L}throw await D.close(),new Error(`Error: missing HTML element with id: mdimg-body.\nHTML template ${E} is not valid.\n`)};function f(e){return e.split(".")[0]}export{u as convert2img,u as mdimg};
