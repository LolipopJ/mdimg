import{resolve as t,basename as e,dirname as n}from"path";import{accessSync as i,constants as o,readFileSync as a,existsSync as l,statSync as s,mkdirSync as r,writeFileSync as m}from"fs";import c from"puppeteer";import{marked as p}from"marked";import{load as d}from"cheerio";const u=async t=>p.parse(t),h=async({inputText:p,inputFilename:h,mdText:w,mdFile:f,outputFilename:$,type:y="png",width:b=800,height:T=600,encoding:_="binary",quality:v=100,htmlText:x,cssText:E,htmlTemplate:S="default",cssTemplate:F="default",log:M=!1,puppeteerProps:C={}})=>{const H=["jpeg","png","webp"],q={data:"",html:""};let O=p||w;const U=h||f;if(U){const e=t(U);if(!l(e))throw new Error(`Input file ${e} is not exists.`);if(!s(e).isFile())throw new Error("Input is not a file.");O=a(e,{encoding:"utf-8"}),M&&console.log(`Start to convert ${e} to an image.`)}else if(!O)throw new Error("You must provide a text or a file to be converted.");const I=_;if(!["base64","binary"].includes(I))throw new Error(`Encoding ${I} is not supported. Valid values: 'base64' and 'binary'.`);let L=y;if(!H.includes(L))throw new Error(`Output file type ${L} is not supported. Valid values: 'jpeg', 'png' and 'webp'.`);let j,k="";if("binary"===I)if($){const i=e($),o=n($),a=i.split("."),l=a.length;if(l<=1)k=t(o,`_outputFilename.${L}`);else{const e=a[l-1];H.includes(e)?(k=t($),L=e):(console.warn(`Output file type must be one of 'jpeg', 'png' or 'webp'. Use '${L}' type.`),k=t(o,`${a[0]}.${L}`))}}else k=t("mdimg_output",function(t){const e=new Date;return`mdimg_${e.getFullYear()}_${e.getMonth()+1}_${e.getDate()}_${e.getHours()}_${e.getMinutes()}_${e.getSeconds()}_${e.getMilliseconds()}.${t}`}(L));"png"!==L&&(j=v>0&&v<=100?v:100);const D=(({inputHtml:e,htmlText:n,cssText:l,htmlTemplate:s,cssTemplate:r})=>{let m=n,c=l;if(!m){let e=t(__dirname,"../template/html",`${s}.html`);try{i(e,o.R_OK)}catch(n){console.warn(`HTML template ${e} is not found or unreadable. Use default HTML template.`),e=t(__dirname,"../template/html/default.html")}m=a(e).toString()}if(!c){let e=t(__dirname,"../template/css",`${r}.css`);try{i(e,o.R_OK)}catch(n){console.warn(`CSS template ${e} is not found or unreadable. Use default CSS template.`),e=t(__dirname,"../template/css/default.css")}c=a(e).toString()}const p=d(m);return p(".markdown-body").html(e),`\n  <!DOCTYPE html>\n  <html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>mdimg</title>\n    <style>\n      ${c}\n    </style>\n  </head>\n  <body>\n    ${p.html()}\n  </body>\n  </html>`})({inputHtml:await u(O),htmlText:x,cssText:E,htmlTemplate:g(S),cssTemplate:g(F)});q.html=D;const P=await c.launch({defaultViewport:{width:b,height:T},args:[`--window-size=${b},${T}`],...C}),V=await P.newPage();await V.setContent(D,{waitUntil:"networkidle0"});const Y=await V.$("#mdimg-body");if(Y){if("binary"===I){!function(t){const e=n(t);try{r(e,{recursive:!0}),m(t,"")}catch(e){throw new Error(`Create new file ${t} failed.\n`+String(e))}}(k);const t=await Y.screenshot({path:k,quality:j,encoding:I});M&&console.log(`Convert to image successfully!${j?" Iamge quality: "+j:""}\nFile: ${k}`),q.data=t,q.path=k}else if("base64"===I){const t=await Y.screenshot({type:L,quality:j,encoding:I});M&&console.log(`Convert to BASE64 encoded string successfully!${j?" Iamge quality: "+j:""}\n${t}`),q.data=t}return await P.close(),q}throw await P.close(),new Error(`Missing HTML element with id: mdimg-body.\nHTML template ${S} is not valid.`)};function g(t){return t.split(".")[0]}export{h as convert2img};
